Mastermind_game.py represents the classic board game Mastermind featuring the turtle module of Python. The game challenges the player to find a secret code of four colors randomly selected from 6 possible colors. The game features a visually appealing interface, including a guessing frame, leaderboard display, color buttons, and action buttons such as check, reset, and quit. Action buttons are designed from external gif images.

The game displays a pop-up at its opening and prompts the user to enter their name. The user starts selecting colors by clicking the color buttons. Each guess is evaluated to determine the number of correctly guessed colors in the correct position ("bulls") and the correct colors in the wrong position ("cows"). The results are visually represented using pegs of different colors (black for bulls, red for cows). The game board displays the history of guesses and the current guesses with the arrow indicator.

The leaderboard is designed to display the top 10 high scores. If the same user (same name) plays the game several times, their most recent score is shown on the leaderboard. So, the leaderboard only updates the score each time when played by the same user instead of creating separate names and scores for similar names.

The user enters the game with a score of zero, and the leaderboard displays the leaderboard in ascending order. One is the highest score, and ten is the lowest score. The last ten scores are stored in the leaderboard.txt file. If the game can not find a leaderboard.txt file, it displays the leaderboard_error.gif, creates a new file, and starts the new game. Successfully handles errors, creates a text file, and logs all errors in the mastermind_errors.err text file.

At the end of the game, another pop-up window displays and lets the user know about the results. If the user wins the game, the winner.gif pop-up will be displayed at the center of the screen, along with the secret code and the user's score. If the user loses, the Lose.gif pop-up will be displayed with a separate secret code and the current score pop-up. The secret code pop-up also invites the user to another game. If the user clicks ok, the game allows them to enter their name and start the new game. If the user clicks the cancel button, the game displays the quitmsg.gif and quits the game. This future is added to keep the player engaged with the game. If, for any reason, the user clicks the quit button(quit.gif) while playing, the game displays the quitmsg.gif and leaves the game.

I broke down the init method into two pieces (def __init__ and def game_graphics) to test the game guess logic without starting the game graphics. def __init__ Sets up the game configuration, including the necessary methods for guessing logic to create win-and-lose scenarios. The boolean flag indicates whether the game is initialized in test mode. The default mode is False. If not in test mode, it calls the def game_graphics, which sets up the game's graphical UI. If in test mode, it starts without graphics.